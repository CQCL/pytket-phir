##############################################################################
#
# Copyright (c) 2023 Quantinuum LLC All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.
#
##############################################################################

import json
import logging

from pytket.phir.phirgen_parallel import genphir_parallel
from pytket.phir.place_and_route import place_and_route
from pytket.phir.qtm_machine import QTM_MACHINES_MAP, QtmMachine
from pytket.phir.rebasing.rebaser import rebase_to_qtm_machine
from pytket.phir.sharding.sharder import Sharder

from .sample_data import QasmFile, get_qasm_as_circuit

logger = logging.getLogger(__name__)


def get_phir_json(qasmfile: QasmFile):  # type: ignore[no-untyped-def]
    """Get the QASM file for the specified circuit."""
    qtm_machine = QtmMachine.H1_1
    circuit = get_qasm_as_circuit(qasmfile)
    circuit = rebase_to_qtm_machine(circuit, qtm_machine.value)
    machine = QTM_MACHINES_MAP.get(qtm_machine)
    sharder = Sharder(circuit)
    shards = sharder.shard()
    placed = place_and_route(shards, machine)
    return json.loads(genphir_parallel(placed, machine))  # type: ignore[misc, arg-type]


def test_bv_n10() -> None:
    """Make sure the parallelization is happening properly for the BV circuit."""
    actual = get_phir_json(QasmFile.bv_n10)  # type: ignore[misc]
    expected = {
        "format": "PHIR/JSON",
        "version": "0.1.0",
        "metadata": {"source": "pytket-phir", "strict_parallelism": "true"},
        "ops": [
            {"data": "qvar_define", "data_type": "qubits", "variable": "q", "size": 10},
            {"data": "cvar_define", "data_type": "u32", "variable": "cr", "size": 9},
            {"//": "Rz(1)"},
            {
                "qop": "RZ",
                "angles": [[1.0], "pi"],
                "args": [
                    ["q", 0],
                    ["q", 1],
                    ["q", 2],
                    ["q", 3],
                    ["q", 4],
                    ["q", 5],
                    ["q", 6],
                    ["q", 7],
                    ["q", 8],
                ],
            },
            {"//": "Parallel R1XY"},
            {
                "block": "qparallel",
                "ops": [
                    {"qop": "R1XY", "angles": [[1.0, 0.0], "pi"], "args": [["q", 9]]},
                    {
                        "qop": "R1XY",
                        "angles": [[0.5, 0.5], "pi"],
                        "args": [
                            ["q", 0],
                            ["q", 1],
                            ["q", 2],
                            ["q", 3],
                            ["q", 4],
                            ["q", 5],
                            ["q", 6],
                            ["q", 7],
                            ["q", 8],
                        ],
                    },
                ],
            },
            {"//": "Rz(1)"},
            {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 9]]},
            {"//": "PhasedX(0.5, 0.5)"},
            {"qop": "R1XY", "angles": [[0.5, 0.5], "pi"], "args": [["q", 9]]},
            {
                "//": "Barrier q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9];"  # noqa: E501
            },
            {"mop": "Transport", "duration": [0.0, "ms"]},
            {"//": "Rz(1)"},
            {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 0], ["q", 9]]},
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "ZZPhase(0.5) q[0], q[9];"},
            {"qop": "RZZ", "angles": [[0.5], "pi"], "args": [[["q", 0], ["q", 9]]]},
            {"mop": "Transport", "duration": [38.0, "ms"]},
            {"//": "Parallel RZ"},
            {
                "block": "qparallel",
                "ops": [
                    {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 1]]},
                    {"qop": "RZ", "angles": [[0.5], "pi"], "args": [["q", 9]]},
                ],
            },
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "Rz(1)"},
            {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 9]]},
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "ZZPhase(0.5) q[1], q[9];"},
            {"qop": "RZZ", "angles": [[0.5], "pi"], "args": [[["q", 1], ["q", 9]]]},
            {"mop": "Transport", "duration": [36.0, "ms"]},
            {"//": "Parallel RZ"},
            {
                "block": "qparallel",
                "ops": [
                    {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 2]]},
                    {"qop": "RZ", "angles": [[0.5], "pi"], "args": [["q", 9]]},
                ],
            },
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "Rz(1)"},
            {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 9]]},
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "ZZPhase(0.5) q[2], q[9];"},
            {"qop": "RZZ", "angles": [[0.5], "pi"], "args": [[["q", 2], ["q", 9]]]},
            {"mop": "Transport", "duration": [34.0, "ms"]},
            {"//": "Parallel RZ"},
            {
                "block": "qparallel",
                "ops": [
                    {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 3]]},
                    {"qop": "RZ", "angles": [[0.5], "pi"], "args": [["q", 9]]},
                ],
            },
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "Rz(1)"},
            {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 9]]},
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "ZZPhase(0.5) q[3], q[9];"},
            {"qop": "RZZ", "angles": [[0.5], "pi"], "args": [[["q", 3], ["q", 9]]]},
            {"mop": "Transport", "duration": [32.0, "ms"]},
            {"//": "Parallel RZ"},
            {
                "block": "qparallel",
                "ops": [
                    {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 4]]},
                    {"qop": "RZ", "angles": [[0.5], "pi"], "args": [["q", 9]]},
                ],
            },
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "Rz(1)"},
            {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 9]]},
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "ZZPhase(0.5) q[4], q[9];"},
            {"qop": "RZZ", "angles": [[0.5], "pi"], "args": [[["q", 4], ["q", 9]]]},
            {"mop": "Transport", "duration": [6.0, "ms"]},
            {"//": "Parallel RZ"},
            {
                "block": "qparallel",
                "ops": [
                    {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 5]]},
                    {"qop": "RZ", "angles": [[0.5], "pi"], "args": [["q", 9]]},
                ],
            },
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "Rz(1)"},
            {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 9]]},
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "ZZPhase(0.5) q[5], q[9];"},
            {"qop": "RZZ", "angles": [[0.5], "pi"], "args": [[["q", 5], ["q", 9]]]},
            {"mop": "Transport", "duration": [4.0, "ms"]},
            {"//": "Parallel RZ"},
            {
                "block": "qparallel",
                "ops": [
                    {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 6]]},
                    {"qop": "RZ", "angles": [[0.5], "pi"], "args": [["q", 9]]},
                ],
            },
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "Rz(1)"},
            {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 9]]},
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "ZZPhase(0.5) q[6], q[9];"},
            {"qop": "RZZ", "angles": [[0.5], "pi"], "args": [[["q", 6], ["q", 9]]]},
            {"mop": "Transport", "duration": [4.0, "ms"]},
            {"//": "Parallel RZ"},
            {
                "block": "qparallel",
                "ops": [
                    {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 7]]},
                    {"qop": "RZ", "angles": [[0.5], "pi"], "args": [["q", 9]]},
                ],
            },
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "Rz(1)"},
            {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 9]]},
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "ZZPhase(0.5) q[7], q[9];"},
            {"qop": "RZZ", "angles": [[0.5], "pi"], "args": [[["q", 7], ["q", 9]]]},
            {"mop": "Transport", "duration": [6.0, "ms"]},
            {"//": "Parallel RZ"},
            {
                "block": "qparallel",
                "ops": [
                    {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 8]]},
                    {"qop": "RZ", "angles": [[0.5], "pi"], "args": [["q", 9]]},
                ],
            },
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "Rz(1)"},
            {"qop": "RZ", "angles": [[1.0], "pi"], "args": [["q", 9]]},
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {"//": "ZZPhase(0.5) q[8], q[9];"},
            {"qop": "RZZ", "angles": [[0.5], "pi"], "args": [[["q", 8], ["q", 9]]]},
            {"mop": "Transport", "duration": [8.0, "ms"]},
            {"//": "Parallel RZ"},
            {
                "block": "qparallel",
                "ops": [
                    {
                        "qop": "RZ",
                        "angles": [[1.5], "pi"],
                        "args": [
                            ["q", 0],
                            ["q", 1],
                            ["q", 2],
                            ["q", 3],
                            ["q", 4],
                            ["q", 5],
                            ["q", 6],
                            ["q", 7],
                            ["q", 8],
                        ],
                    },
                    {"qop": "RZ", "angles": [[0.5], "pi"], "args": [["q", 9]]},
                ],
            },
            {"//": "PhasedX(1.5, 0.5)"},
            {"qop": "R1XY", "angles": [[1.5, 0.5], "pi"], "args": [["q", 9]]},
            {
                "//": "Barrier q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9];"  # noqa: E501
            },
            {"mop": "Transport", "duration": [0.0, "ms"]},
            {"//": "Rz(1)"},
            {
                "qop": "RZ",
                "angles": [[1.0], "pi"],
                "args": [
                    ["q", 0],
                    ["q", 1],
                    ["q", 2],
                    ["q", 3],
                    ["q", 4],
                    ["q", 5],
                    ["q", 6],
                    ["q", 7],
                    ["q", 8],
                ],
            },
            {"//": "PhasedX(0.5, 0.5)"},
            {
                "qop": "R1XY",
                "angles": [[0.5, 0.5], "pi"],
                "args": [
                    ["q", 0],
                    ["q", 1],
                    ["q", 2],
                    ["q", 3],
                    ["q", 4],
                    ["q", 5],
                    ["q", 6],
                    ["q", 7],
                    ["q", 8],
                ],
            },
            {
                "qop": "Measure",
                "args": [
                    ["q", 0],
                    ["q", 1],
                    ["q", 2],
                    ["q", 3],
                    ["q", 4],
                    ["q", 5],
                    ["q", 6],
                    ["q", 7],
                    ["q", 8],
                ],
                "returns": [
                    ["cr", 0],
                    ["cr", 1],
                    ["cr", 2],
                    ["cr", 3],
                    ["cr", 4],
                    ["cr", 5],
                    ["cr", 6],
                    ["cr", 7],
                    ["cr", 8],
                ],
            },
            {"mop": "Transport", "duration": [0.0, "ms"]},
        ],
    }
    assert actual == expected  # type: ignore[misc]


def test_oned_brickwork_circuit_n20() -> None:
    """Make sure the parallelization is happening properly for the brickwork circuit."""
    actual = get_phir_json(QasmFile.oned_brickwork_circuit_n20)  # type: ignore[misc]
    expected = {
        "format": "PHIR/JSON",
        "version": "0.1.0",
        "metadata": {"source": "pytket-phir", "strict_parallelism": "true"},
        "ops": [
            {"data": "qvar_define", "data_type": "qubits", "variable": "q", "size": 20},
            {"data": "cvar_define", "data_type": "u32", "variable": "c", "size": 20},
            {"//": "Rz(1)"},
            {
                "qop": "RZ",
                "angles": [[1.0], "pi"],
                "args": [
                    ["q", 0],
                    ["q", 1],
                    ["q", 2],
                    ["q", 3],
                    ["q", 4],
                    ["q", 5],
                    ["q", 6],
                    ["q", 7],
                    ["q", 8],
                    ["q", 9],
                    ["q", 10],
                    ["q", 11],
                    ["q", 12],
                    ["q", 13],
                    ["q", 14],
                    ["q", 15],
                    ["q", 16],
                    ["q", 17],
                    ["q", 18],
                    ["q", 19],
                ],
            },
            {"//": "PhasedX(0.5, 0.5)"},
            {
                "qop": "R1XY",
                "angles": [[0.5, 0.5], "pi"],
                "args": [
                    ["q", 0],
                    ["q", 1],
                    ["q", 2],
                    ["q", 3],
                    ["q", 4],
                    ["q", 5],
                    ["q", 6],
                    ["q", 7],
                    ["q", 8],
                    ["q", 9],
                    ["q", 10],
                    ["q", 11],
                    ["q", 12],
                    ["q", 13],
                    ["q", 14],
                    ["q", 15],
                    ["q", 16],
                    ["q", 17],
                    ["q", 18],
                    ["q", 19],
                ],
            },
            {"//": "ZZPhase(3.875)"},
            {
                "qop": "RZZ",
                "angles": [[3.875], "pi"],
                "args": [
                    [["q", 0], ["q", 1]],
                    [["q", 2], ["q", 3]],
                    [["q", 4], ["q", 5]],
                    [["q", 6], ["q", 7]],
                    [["q", 8], ["q", 9]],
                    [["q", 10], ["q", 11]],
                    [["q", 12], ["q", 13]],
                    [["q", 14], ["q", 15]],
                    [["q", 16], ["q", 17]],
                    [["q", 18], ["q", 19]],
                ],
            },
            {"mop": "Transport", "duration": [0.0, "ms"]},
            {"//": "ZZPhase(3.875)"},
            {
                "qop": "RZZ",
                "angles": [[3.875], "pi"],
                "args": [
                    [["q", 0], ["q", 19]],
                    [["q", 1], ["q", 2]],
                    [["q", 3], ["q", 4]],
                    [["q", 5], ["q", 6]],
                    [["q", 7], ["q", 8]],
                    [["q", 9], ["q", 10]],
                    [["q", 11], ["q", 12]],
                    [["q", 13], ["q", 14]],
                    [["q", 15], ["q", 16]],
                    [["q", 17], ["q", 18]],
                ],
            },
            {"mop": "Transport", "duration": [34.0, "ms"]},
            {"//": "Rz(1)"},
            {
                "qop": "RZ",
                "angles": [[1.0], "pi"],
                "args": [
                    ["q", 0],
                    ["q", 1],
                    ["q", 2],
                    ["q", 3],
                    ["q", 4],
                    ["q", 5],
                    ["q", 6],
                    ["q", 7],
                    ["q", 8],
                    ["q", 9],
                    ["q", 10],
                    ["q", 11],
                    ["q", 12],
                    ["q", 13],
                    ["q", 14],
                    ["q", 15],
                    ["q", 16],
                    ["q", 17],
                    ["q", 18],
                    ["q", 19],
                ],
            },
            {"//": "PhasedX(0.5, 0.5)"},
            {
                "qop": "R1XY",
                "angles": [[0.5, 0.5], "pi"],
                "args": [
                    ["q", 0],
                    ["q", 1],
                    ["q", 2],
                    ["q", 3],
                    ["q", 4],
                    ["q", 5],
                    ["q", 6],
                    ["q", 7],
                    ["q", 8],
                    ["q", 9],
                    ["q", 10],
                    ["q", 11],
                    ["q", 12],
                    ["q", 13],
                    ["q", 14],
                    ["q", 15],
                    ["q", 16],
                    ["q", 17],
                    ["q", 18],
                    ["q", 19],
                ],
            },
            {
                "qop": "Measure",
                "args": [
                    ["q", 0],
                    ["q", 1],
                    ["q", 2],
                    ["q", 3],
                    ["q", 4],
                    ["q", 5],
                    ["q", 6],
                    ["q", 7],
                    ["q", 8],
                    ["q", 9],
                    ["q", 10],
                    ["q", 11],
                    ["q", 12],
                    ["q", 13],
                    ["q", 14],
                    ["q", 15],
                    ["q", 16],
                    ["q", 17],
                    ["q", 18],
                    ["q", 19],
                ],
                "returns": [
                    ["c", 0],
                    ["c", 1],
                    ["c", 2],
                    ["c", 3],
                    ["c", 4],
                    ["c", 5],
                    ["c", 6],
                    ["c", 7],
                    ["c", 8],
                    ["c", 9],
                    ["c", 10],
                    ["c", 11],
                    ["c", 12],
                    ["c", 13],
                    ["c", 14],
                    ["c", 15],
                    ["c", 16],
                    ["c", 17],
                    ["c", 18],
                    ["c", 19],
                ],
            },
            {"mop": "Transport", "duration": [0.0, "ms"]},
        ],
    }
    assert actual == expected  # type: ignore[misc]
